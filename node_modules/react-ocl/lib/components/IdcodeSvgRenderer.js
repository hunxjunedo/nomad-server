function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { memo } from 'react';
import { useHandleMemoError } from '../hooks/useHandleMemoError';
import { ErrorRenderer, DefaultErrorRenderer } from './ErrorRenderer';
import SvgRenderer from './SvgRenderer';
function IdcodeSvgRenderer(props) {
  let {
    OCL,
    idcode,
    coordinates,
    ErrorComponent = DefaultIdcodeErrorComponent,
    ...otherProps
  } = props;
  const [error, mol] = useHandleMemoError(() => OCL.Molecule.fromIDCode(idcode, coordinates), [OCL, idcode, coordinates]);
  if (error) {
    return /*#__PURE__*/React.createElement(ErrorRenderer, {
      width: props.width,
      height: props.height,
      ErrorComponent: ErrorComponent,
      value: idcode,
      error: error
    });
  }
  return /*#__PURE__*/React.createElement(SvgRenderer, _extends({
    mol: mol
  }, otherProps));
}
export default /*#__PURE__*/memo(IdcodeSvgRenderer);
function DefaultIdcodeErrorComponent(props) {
  return /*#__PURE__*/React.createElement(DefaultErrorRenderer, {
    height: props.height,
    message: "Invalid ID code"
  });
}
//# sourceMappingURL=IdcodeSvgRenderer.js.map