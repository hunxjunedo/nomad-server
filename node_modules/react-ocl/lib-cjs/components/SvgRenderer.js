"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SvgRenderer;
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function SvgRenderer(props) {
  const {
    width = 300,
    height = 150,
    id: idFromProps,
    atomHighlight,
    atomHighlightOpacity = 0.5,
    atomHighlightColor = 'yellow',
    onAtomEnter,
    onAtomLeave,
    onAtomClick,
    bondHighlight,
    bondHighlightOpacity = 0.5,
    bondHighlightColor = 'yellow',
    onBondEnter,
    onBondLeave,
    onBondClick,
    mol,
    factorTextSize = 1,
    suppressChiralText = true,
    suppressESR = true,
    suppressCIPParity = true,
    noStereoProblem = true,
    ...otherProps
  } = props;
  const reactId = (0, _react.useId)().replace(/:/g, '-');
  const internalId = `react-ocl${reactId}`;
  const ref = (0, _react.useRef)(null);
  const id = idFromProps || internalId;
  const toSVGOptions = {
    factorTextSize,
    suppressChiralText,
    suppressESR,
    suppressCIPParity,
    noStereoProblem,
    ...otherProps
  };
  const serializedOptions = JSON.stringify(toSVGOptions);
  const svgString = (0, _react.useMemo)(() => {
    return getSVG(mol, width, height, id, serializedOptions);
  }, [mol, width, height, id, serializedOptions]);
  const atomStart = `${id}:Atom:`;
  const bondStart = `${id}:Bond:`;
  useEvents(ref, atomStart, onAtomEnter, onAtomLeave, onAtomClick);
  useEvents(ref, bondStart, onBondEnter, onBondLeave, onBondClick);
  useHighlight(ref, atomStart, atomHighlight, atomHighlightColor, atomHighlightOpacity, 'fill');
  useHighlight(ref, bondStart, bondHighlight, bondHighlightColor, bondHighlightOpacity, 'stroke');
  const svgContent = svgString.substring(svgString.indexOf('>') + 1, svgString.lastIndexOf('<'));
  const svgHeader = svgString.substring(5, svgString.indexOf('>'));
  const headerProps = Object.fromEntries([...svgHeader.matchAll(/([^=]+)="([^"]*)" ?/g)].map(s => s.slice(1, 3)));
  return /*#__PURE__*/_react.default.createElement("svg", _extends({
    style: {
      userSelect: 'none'
    },
    ref: ref
  }, headerProps, {
    // eslint-disable-next-line react/no-danger
    dangerouslySetInnerHTML: {
      __html: svgContent
    }
  }));
}
function useEvents(ref, start, onEnter, onLeave, onClick) {
  (0, _react.useEffect)(() => {
    const svg = ref.current;
    if (!svg) return;
    const handleEnter = event => {
      if (!onEnter) return;
      const {
        target
      } = event;
      if (target.className.baseVal === 'event' && target.id.startsWith(start)) {
        onEnter(Number(target.id.replace(start, '')), event);
      }
    };
    const handleLeave = event => {
      if (!onLeave) return;
      const {
        target
      } = event;
      if (target.className.baseVal === 'event' && target.id.startsWith(start)) {
        onLeave(Number(target.id.replace(start, '')), event);
      }
    };
    const handleClick = event => {
      if (!onClick) return;
      const {
        target
      } = event;
      if (target.className.baseVal === 'event' && target.id.startsWith(start)) {
        onClick(Number(target.id.replace(start, '')), event);
      }
    };
    svg.addEventListener('mouseover', handleEnter);
    svg.addEventListener('mouseout', handleLeave);
    svg.addEventListener('click', handleClick);
    return () => {
      svg.removeEventListener('mouseover', handleEnter);
      svg.removeEventListener('mouseout', handleLeave);
      svg.removeEventListener('click', handleClick);
    };
  }, [ref, start, onEnter, onLeave, onClick]);
}
function useHighlight(ref, start, highlight, highlightColor, highlightOpacity, attribute) {
  (0, _react.useEffect)(() => {
    const svg = ref.current;
    if (!svg) return;
    const elements = svg.querySelectorAll(`[id^="${start}"]`);
    for (const element of elements) {
      const elementId = Number(element.id.replace(start, ''));
      if (highlight && highlight.includes(elementId)) {
        element.setAttribute('opacity', highlightOpacity);
        element.setAttribute(attribute, highlightColor);
      } else {
        element.setAttribute('opacity', 0);
      }
    }
  });
}
function getSVG(mol, width, height, id, serializedOptions) {
  const options = JSON.parse(serializedOptions);
  const {
    labelFontFamily = 'Arial, Helvetica, sans-serif',
    labelFontSize = 14,
    labelColor = 'rgb(0,0,0)',
    label,
    ...svgOptions
  } = options;
  let svg = mol.toSVG(width, height, id, svgOptions);
  if (label) {
    const [minX, minY, realWidth, realHeight] = svg.match(/viewBox="([^"]*)"/)[1].split(' ').map(Number);
    svg = svg.replace(/<\/svg>/, `<text fill="${labelColor}" font-family="${labelFontFamily}" text-anchor="middle" x="${realWidth / 2 + minX} " y="${realHeight + minY - labelFontSize / 3 // could be improved
    } " font-size="${labelFontSize} ">${label}</text></svg>`);
  }
  return svg;
}
//# sourceMappingURL=SvgRenderer.js.map