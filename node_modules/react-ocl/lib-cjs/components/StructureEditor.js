"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _full = _interopRequireDefault(require("openchemlib/full"));
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function StructureEditor(props) {
  const {
    width = 675,
    height = 450,
    initialMolfile = '',
    initialIDCode = '',
    fragment = false,
    svgMenu = true,
    onChange,
    onAtomEnter,
    onAtomLeave,
    onBondEnter,
    onBondLeave
  } = props;
  const domRef = (0, _react.useRef)();
  const editorRef = (0, _react.useRef)({
    editor: null,
    hadFirstChange: false
  });
  const callbacksRef = (0, _react.useRef)({});
  (0, _react.useEffect)(() => {
    domRef.current.innerHTML = '';

    // GWT doesn't play well with the shadow DOM. This hack allows to load an
    // OCL editor inside a shadow root.
    const root = domRef.current.getRootNode();
    let originalGetElementById;
    if (root instanceof ShadowRoot) {
      originalGetElementById = document.getElementById;
      document.getElementById = root.getElementById.bind(root);
    }
    let editor;
    try {
      editor = new _full.default.StructureEditor(domRef.current, svgMenu, 1);
    } finally {
      if (root instanceof ShadowRoot) {
        document.getElementById = originalGetElementById;
      }
    }
    editorRef.current.editor = editor;
    if (initialMolfile && initialIDCode) {
      throw new Error('Cannot specify both initialMolfile and initialIDCode');
    }
    if (initialMolfile) editor.setMolFile(initialMolfile);
    if (initialIDCode) editor.setIDCode(initialIDCode);
    editor.setFragment(fragment);
    editor.setChangeListenerCallback((...args) => {
      if (callbacksRef.current.onChange) {
        callbacksRef.current.onChange(...args);
      }
    });
    editor.setAtomHightlightCallback((...args) => {
      if (callbacksRef.current.onAtomHighlight) {
        callbacksRef.current.onAtomHighlight(...args);
      }
    });
    editor.setBondHightlightCallback((...args) => {
      if (callbacksRef.current.onBondHighlight) {
        callbacksRef.current.onBondHighlight(...args);
      }
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [width, height, svgMenu]);
  (0, _react.useEffect)(() => {
    callbacksRef.current.onChange = () => {
      if (!editorRef.current.hadFirstChange) {
        editorRef.current.hadFirstChange = true;
      } else if (onChange) {
        const molfile = editorRef.current.editor.getMolFileV3();
        const molecule = editorRef.current.editor.getMolecule();
        const idCode = editorRef.current.editor.getIDCode();
        onChange(molfile, molecule, idCode);
      }
    };
    callbacksRef.current.onAtomHighlight = (atomId, enter) => {
      if (enter && onAtomEnter) {
        onAtomEnter(atomId);
      } else if (!enter && onAtomLeave) {
        onAtomLeave(atomId);
      }
    };
    callbacksRef.current.onBondHighlight = (bondId, enter) => {
      if (enter && onBondEnter) {
        onBondEnter(bondId);
      } else if (!enter && onBondLeave) {
        onBondLeave(bondId);
      }
    };
  }, [onChange, onAtomEnter, onAtomLeave, onBondEnter, onBondLeave]);
  (0, _react.useEffect)(() => {
    if (editorRef.current.editor) {
      editorRef.current.editor.setFragment(fragment);
    }
  }, [fragment]);
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: domRef,
    style: {
      width,
      height
    }
  });
}
var _default = StructureEditor;
exports.default = _default;
//# sourceMappingURL=StructureEditor.js.map