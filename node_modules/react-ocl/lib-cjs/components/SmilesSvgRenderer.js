"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _useHandleMemoError = require("../hooks/useHandleMemoError");
var _ErrorRenderer = require("./ErrorRenderer");
var _SvgRenderer = _interopRequireDefault(require("./SvgRenderer"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function SmilesSvgRenderer(props) {
  const {
    OCL,
    smiles,
    ErrorComponent = DefaultSmilesErrorComponent,
    ...otherProps
  } = props;
  const [error, mol] = (0, _useHandleMemoError.useHandleMemoError)(() => OCL.Molecule.fromSmiles(smiles), [OCL, smiles]);
  if (error) {
    return /*#__PURE__*/_react.default.createElement(_ErrorRenderer.ErrorRenderer, {
      width: props.width,
      height: props.height,
      ErrorComponent: ErrorComponent,
      value: smiles,
      error: error
    });
  }
  return /*#__PURE__*/_react.default.createElement(_SvgRenderer.default, _extends({
    mol: mol
  }, otherProps));
}
var _default = /*#__PURE__*/(0, _react.memo)(SmilesSvgRenderer);
exports.default = _default;
function DefaultSmilesErrorComponent(props) {
  return /*#__PURE__*/_react.default.createElement(_ErrorRenderer.DefaultErrorRenderer, {
    height: props.height,
    message: "Invalid SMILES"
  });
}
//# sourceMappingURL=SmilesSvgRenderer.js.map